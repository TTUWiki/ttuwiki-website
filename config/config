use utf8;
use DateTime;
package OddMuse;

use Digest::SHA qw(sha256_hex);
$PassHashFunction = 'sha256_hex';
$PassSalt = '0c5bc418b2009ab13b2cf1d5b4a46b0882cf4f60a77b09373ef5c9af26f67500';
$AdminPass = '6a6f03729f9b663882242c72e26301410cdc8671b9269dbfd40450c5e6dfeb6d';

$SiteName  = "TTÜWiki";

$CommentsPrefix = 'Комментарии_на_';
$CommentsPattern = "^(?|Комментарии_на_(.*)|.*)\$";
$EditAllowed = 1;
$StyleSheet = '/css/stylesheet.css';
$MaxPost = 430080;
$HomePage = 'Главная';
$RCName = 'Последние изменения';
@UserGotoBarPages = ($HomePage, 'Расписания', 'Полезное', $AskPage, $RCName); # not required anymore?
#$SurgeProtection = '';
$SurgeProtectionViews = 20;
@RcDays = (7, 30, 90);
$RcDefault = 90;

$GitMail = 'anybody@ttuwiki.org';

$AskPage = 'Задать_вопрос';
$QuestionPage = 'Вопрос_';
$NewQuestion = 'Ваш вопрос:';

$NewText = "Эта страница пуста.\n";
$NewComment = "Ваш комментарий:";

$Translate{'Attach file:'} = 'Прикрепить файл:';
$Translate{'Upload'} = 'Загрузить';
$Translate{'Journal'} = ' ';
$Translate{'Comments:'} = 'Комментарии:';

$FullUrl = ($ENV{'HTTPS'} ? 'https' : 'http') . '://ttuwiki.ee';
$ScriptName = ($ENV{'HTTPS'} ? 'https' : 'http') . '://ttuwiki.ee';

$CreoleLineBreaks = 1;
$CreoleTableCellsAllowBlockLevelElements = 1;
$CreoleDashStyleUnorderedLists = 1;

sub CalcDay {
  #return DateTime->now(time_zone => 'Europe/Tallinn')->date();
  return DateTime->from_epoch(epoch => shift, time_zone => 'Europe/Tallinn')->date();
}

sub CalcTime {
  #return DateTime->now(time_zone => 'Europe/Tallinn')->time();
  return DateTime->from_epoch(epoch => shift, time_zone => 'Europe/Tallinn')->time();
}

$Translate{'Search:'} = ' ';
$Translate{'Go!'} = 'Search';
sub GetSearchForm {
    my $form = # $q->label({-for=>'search'}, '') . ''
      $q->textfield(-name=>'search', -id=>'search', -size=>20, -placeholder=>'Поиск...',
                    -accesskey=>T('f')) . '';
    if ($ReplaceForm) {
        $form .= $q->label({-for=>'replace'}, T('Replace:')) . ' '
            . $q->textfield(-name=>'replace', -id=>'replace', -size=>20) . ' '
            . $q->checkbox(-name=>'delete', -label=>T('Delete')) . ' ';
    }
    if (%Languages) {
        $form .= $q->label({-for=>'searchlang'}, T('Language:')) . ' '
            . $q->textfield(-name=>'lang', -id=>'searchlang', -size=>10,
                            -default=>GetParam('lang', '')) . ' ';
  }
    return GetFormStart(undef, 'get', 'search')
        . $form . #$q->submit('dosearch', T('Go!')) .
        $q->endform;
}

sub GetHeaderTitle {
  my ($id, $title, $oldId) = @_;
  return $q->h1($title) if $id eq '';
  return $q->h1(((UserCanEdit($id, 0) and $id ne $AskPage) ? GetEditLink($id, T('Edit this page'), undef, T('e')) : '') .
		GetSearchLink($id, '', '', T('Click to search for references to this page')));
}

sub PrintPageCommentsLink {
  my ($id, $comments) = @_;
  print $q->p({-class=>'comment'}, GetPageLink($id, T('Comments on this page')));
}

@QuestionaskerQuestions = (
  ['О каком университете этот сайт? Напишите три буквы.' => sub { shift =~ /TT[UuÜü]|[Тт][Тт][Уу]/i }] # XXX will /i handle non-ascii characters here?
);

use Geo::IP;

*OldQuestionaskerException = *QuestionaskerException;
*QuestionaskerException = *NewQuestionaskerException;
sub NewQuestionaskerException {
  return 1 if Geo::IP->new()->country_code_by_addr($ENV{REMOTE_ADDR}) eq 'EE';
  return OldQuestionaskerException(@_);
}

sub DoSearch {
  my $string = shift || GetParam('search', '');
  my $re = UnquoteHtml($string);
  return DoIndex() if $string eq '';
  eval { qr/$re/ }
    or $@ and ReportError(Ts('Malformed regular expression in %s', $string),
			  '400 BAD REQUEST');
  my $replacement = GetParam('replace', undef);
  my $raw = GetParam('raw', '');
  my @results;
  if ($replacement or GetParam('delete', 0)) {
    return unless UserIsAdminOrError();
    print GetHeader('', Ts('Replaced: %s', $string . " &#x2192; " . $replacement)),
      $q->start_div({-class=>'content replacement'});
    @results = Replace($re, UnquoteHtml($replacement));
    foreach (@results) {
      PrintSearchResult($_, $replacement || $re);
    }
  } else {
    if ($raw) {
      print GetHttpHeader('text/plain');
      print RcTextItem('title', Ts('Search for: %s', $string)), RcTextItem('date', TimeToText($Now)),
	RcTextItem('link', $q->url(-path_info=>1, -query=>1)), "\n" if GetParam('context', 1);
    } else {
      print GetHeader('', Ts('Search for: %s', $string)), $q->start_div({-class=>'content search'});
      print $q->p({-class=>'links'}, SearchMenu($string));
      PrintQuickSearch($re); # CUSTOM
    }
    @results = SearchTitleAndBody($re, \&PrintSearchResult, SearchRegexp($re));
  }
  print SearchResultCount($#results + 1), $q->end_div() unless $raw;
  PrintFooter() unless $raw;
}

sub PrintQuickSearch {
  my ($re) = @_;
  my $courses = join $q->br(), GetQuickSearchResults("$DataDir/course-index", $re);
  if ($courses) {
    print $q->h2('Õppeained');
    print $courses;
  }
  my $kavad   = join $q->br(), GetQuickSearchResults("$DataDir/kava-index", $re);
  if ($kavad) {
    print $q->h2('Õppekavad');
    print $kavad;
  }
  print $q->h2('Pages') if $courses or $kavad;
}

sub GetQuickSearchResults {
  my ($filename, $re) = @_;
  open my $file, $filename or return; # ignore non-existent files
  my @results = ();
  while (my $line = <$file>) {
    utf8::decode($line);
    if ($line =~ m/$re/i) {
      my ($link) = split(' - ', $line);
      $link =~ s!/!-!g;
      push @results, GetPageLink($link, $line);
    }
  }
  close $file;
  return @results;
}
